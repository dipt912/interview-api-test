{"version":3,"sources":["logo.svg","api-service/index.js","api-service/api.js","App/Component/UserType/index.js","utils/index.js","App/Component/CreateUser/index.js","App/Component/ConfirmationComp/index.js","App/index.js","reportWebVitals.js","index.js"],"names":["API","this","instance","axios","create","baseURL","timeout","headers","method","url","params","data","console","log","message","stack","getEvents","a","createRequest","res","postEvent","UserType","props","state","event","preventDefault","target","value","name","setState","handleInputChange","userTypes","user_types","extra_text_inputs","handleChange","classes","extraInput","Grid","xs","FormControl","variant","className","formControl","InputLabel","id","Select","labelId","fullWidth","onChange","MenuItem","map","ele","i","length","element","item","label","required","validators","errorMessages","handleExtraField","bind","Component","withStyles","theme","minWidth","marginTop","spacing","marginBottom","textAlign","width","color","palette","text","secondary","selectEmpty","buildRequest","req","Object","keys","extra_inputs","first_name","FirstName","last_name","LastName","email","Email","type","CreateUser","forceUpdate","handleExtraInputChange","obj","handleSubmit","history","push","pathname","customNameData","isLoading","submitted","metaData","Fragment","Paper","paper","root","autoComplete","onSubmit","instantValidate","Button","disabled","withRouter","margin","padding","ConfirmedUser","style","fill","onClick","redirectToHome","App","init","path","ConfirmationComp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bb6c4ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\n\n\nexport default class API {\n\n    static init() {\n        this.instance = axios.create({\n            baseURL: 'https://my-json-server.typicode.com/jason-ogasian-walmart/interview-api',\n            timeout: 15000,\n            headers: {\n                'Access-Control-Allow-Origin': 'https://my-json-server.typicode.com/jason-ogasian-walmart/interview-api',\n                'Access-Control-Allow-Credentials': true,\n                'Content-Type': 'application/json',\n            },\n            // withCredentials: true\n        });\n    }\n\n    static getInstance() {\n        return this.instance;\n    }\n\n\n    static async createRequest({method = 'GET', url, params = null, data = null}) {\n        try {\n            return await this.instance({\n                method,\n                url,\n                data,\n                params\n            })\n        } catch (err) {\n            console.log('error', err)\n            throw {\n                message: 'Network Error',\n                stack: err\n            }\n        }\n    }\n}\n","import API from \"./index\";\n\n\nexport const getEvents = async () => {\n    try {\n        const res = await API.createRequest({\n            url: '/user_create',\n            method: 'GET'\n        });\n        return res.data;\n    } catch (e) {\n        console.log('getEvents error', e);\n        throw e;\n    }\n};\n\nexport const postEvent = async (data) => {\n    try {\n        console.log(\"post \", data)\n        const res = await API.createRequest({\n            url: '/update_user',\n            method: 'POST',\n            data: data\n        });\n\n        return res.data\n    } catch (e) {\n        console.log('getEvents error', e);\n        throw e;\n    }\n};\n\n\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport { TextValidator } from 'react-material-ui-form-validator';\n\n\n\nconst useStyles = theme => ({\n    formControl: {\n        minWidth: 40,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        textAlign: 'center',\n        width: '96vW',\n        color: theme.palette.text.secondary,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n});\nclass UserType extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    handleExtraField(event) {\n        event.preventDefault()\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n        this.props.handleInputChange(event);\n    }\n\n    render() {\n        const { userTypes, user_types, extra_text_inputs, handleChange, classes } = this.props;\n        const extraInput = extra_text_inputs[user_types];\n\n        return (\n            <Grid xs={12}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-filled-label\">User Types</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-filled-label\"\n                        id=\"demo-simple-select-filled\"\n                        fullWidth=\"true\"\n                        value={user_types}\n                        onChange={handleChange}\n                    >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n                        {userTypes.map((ele, i) =>\n                            <MenuItem\n                                key={i}\n                                value={ele}>\n                                {ele}\n                            </MenuItem>\n                        )}\n                    </Select>\n                </FormControl>\n\n                {extraInput && extraInput.length && (\n                    extraInput.map((element) => {\n                        return (\n                            <Grid item xs={12}>\n                                <TextValidator\n                                    id={element.value}\n                                    label={element.label}\n                                    name={element.value}\n                                    fullWidth=\"true\"\n                                    required=\"true\"\n                                    variant=\"outlined\"\n                                    validators={['required']}\n                                    errorMessages={[`${element.label} is required`]}\n                                    value={this.state[element.value] || ''}\n                                    onChange={this.handleExtraField.bind(this)} />\n                            </Grid>\n                        )\n                    })\n                )}\n            </Grid>\n        )\n    }\n\n}\n\n// export default UserType;\nexport default withStyles(useStyles)(UserType)","export function buildRequest(state) {\n\n    let req = {}\n    if (Object.keys(state.extra_inputs).length) {\n        req = state.extra_inputs;\n    }\n    req = {\n        ...req,\n        first_name: state.FirstName,\n        last_name: state.LastName,\n        email: state.Email,\n        type:  state.user_types\n    }\n    return req;\n}","import React, { Component } from 'react';\nimport { postEvent, getEvents } from \"../../../api-service/api\";\nimport UserType from '../UserType';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { withRouter } from 'react-router-dom'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { buildRequest } from '../../../utils';\n\n\nconst useStyles = theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100vW',\n        },\n    },\n\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\nclass CreateUser extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            LastName: '',\n            FirstName: '',\n            Email: '',\n            user_types: '',\n            userTypes: [],\n            extra_text_inputs: {},\n            isLoading: false,\n            extra_inputs: {},\n            submitted: false\n        }\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault()\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        }, () => {\n            this.forceUpdate()\n        });\n    }\n\n    handleExtraInputChange = (event) => {\n        event.preventDefault()\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        const obj = {}\n        obj[name] = value;\n        this.setState({\n            extra_inputs: { ...obj }\n        }, () => {\n            this.forceUpdate()\n        });\n    }\n\n\n    async componentDidMount() {\n        const metaData = await getEvents();\n        this.setState({\n            userTypes: metaData.user_types,\n            extra_text_inputs: metaData.extra_text_inputs\n        });\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault()\n        const data = await postEvent(buildRequest(this.state))\n        if (data && Object.keys(data).length) {\n            let { history } = this.props;\n            history.push({\n                pathname: '/confirmed-user',\n                customNameData: data\n            })\n        }\n\n    }\n   \n    handleChange(event) {\n        const type = event.target.value;\n        this.setState({\n            user_types: type\n        }, (state) => {\n            this.forceUpdate()\n        });\n\n    }\n\n\n\n    render() {\n        const { isLoading, LastName, FirstName, Email, userTypes, extra_text_inputs, user_types } = this.state;\n        const { classes } = this.props;\n        return (\n\n            <React.Fragment>\n                <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <div>\n                            {/* <form className={classes.root} autoComplete=\"off\" onSubmit={this.handleSubmit}>\n                         */}\n                                {/* <div className={'form-content'}> */}\n                                <ValidatorForm\n                                    className={classes.root} \n                                    autoComplete=\"off\"\n                                    onSubmit={this.handleSubmit}\n                                    instantValidate={false}\n                                >\n                                <Grid item xs={12}>\n                                <TextValidator\n                                        id=\"lastName\"\n                                        label=\"Last Name\"\n                                        name=\"LastName\"\n                                        fullWidth=\"true\"\n                                        variant=\"outlined\"\n                                        value={LastName}\n                                        validators={['required']}\n                                        errorMessages={['Last Name is required']}\n                                        onChange={this.handleInputChange} />\n\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextValidator\n                                        id=\"firstName\"\n                                        label=\"First Name\"\n                                        name=\"FirstName\"\n                                        fullWidth=\"true\"\n                                        variant=\"outlined\"\n                                        value={FirstName}\n                                        validators={['required']}\n                                        errorMessages={['First Name is required']}\n                                        onChange={this.handleInputChange} />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextValidator\n                                        id=\"Email\"\n                                        label=\"Email\"\n                                        name=\"Email\"\n                                        fullWidth=\"true\"\n                                        variant=\"outlined\"\n                                        value={Email}\n                                        validators={['required', 'isEmail']}\n                                        errorMessages={['required field', 'invalid email']}\n                                        onChange={this.handleInputChange} />\n                                </Grid>\n                                {userTypes &&\n                                    <UserType\n                                        userTypes={userTypes}\n                                        extra_text_inputs={extra_text_inputs}\n                                        user_types={user_types}\n                                        handleChange={this.handleChange.bind(this)}\n                                        handleInputChange={this.handleExtraInputChange.bind(this)} />}\n                                {/* </div> */}\n                                <div className={'buttons-row'}>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        validators={['required']}\n                                        disabled={isLoading}>\n                                        Submit\n                        </Button>\n                                </div>\n                                </ValidatorForm>\n                        </div>\n                    </Paper>\n                </Grid>\n\n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default withRouter(withStyles(useStyles)(CreateUser))\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport CheckCircleOutlineSharpIcon from '@material-ui/icons/CheckCircleOutlineSharp';\n\nconst useStyles = theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100vW',\n        },\n    },\n\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\nclass ConfirmedUser extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n    redirectToHome(event) {\n        event.preventDefault()\n        let { history } = this.props;\n        history.push('interview-api-test')\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>\n                <span> <CheckCircleOutlineSharpIcon style={{fill: \"green\"}}/></span>\n                <span>  User Successfully Created</span>\n                   </h2>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    onClick={this.redirectToHome.bind(this)}\n                >\n                    Return Home\n                        </Button>\n            </div>\n\n        )\n\n    }\n}\n\n\nexport default withRouter(withStyles(useStyles)(ConfirmedUser))","import logo from '../logo.svg';\nimport './index.css';\nimport { Component } from 'react';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport CreateUser from './Component/CreateUser';\nimport API from '../api-service';\nimport ConfirmationComp from './Component/ConfirmationComp';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    API.init()\n  }\n  render() {\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h4> Create User </h4>\n          </header>\n          <BrowserRouter>\n            <Switch>\n            <Route  path=\"/confirmed-user\">\n                <ConfirmationComp/>\n              </Route>\n              <Route  path=\"/interview-api-test\">\n                <CreateUser />\n              </Route>\n              <Route path=\"/\">\n                <CreateUser />\n              </Route>\n            </Switch>\n      </BrowserRouter>\n\n        </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}