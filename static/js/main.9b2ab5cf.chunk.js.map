{"version":3,"sources":["logo.svg","api-service/index.js","api-service/api.constant.js","api-service/api.js","App/Component/UserType/index.js","utils/index.js","App/Component/CreateUser/index.js","App/Component/ConfirmationComp/index.js","App/index.js","reportWebVitals.js","index.js"],"names":["API","process","api_base_url","this","instance","axios","create","baseURL","timeout","headers","method","url","params","data","console","log","message","stack","getEvents","a","createRequest","api_constant","res","postEvent","status","UserType","props","state","event","preventDefault","target","value","name","setState","handleInputChange","userTypes","user_types","extra_text_inputs","handleChange","classes","extraInput","Grid","xs","FormControl","variant","className","formControl","InputLabel","id","Select","labelId","fullWidth","onChange","MenuItem","map","ele","i","length","element","label","required","validators","errorMessages","handleExtraField","bind","Component","withStyles","theme","minWidth","marginTop","spacing","marginBottom","textAlign","width","color","palette","text","secondary","selectEmpty","buildRequest","req","Object","keys","extra_inputs","first_name","FirstName","last_name","LastName","email","Email","type","CreateUser","forceUpdate","handleExtraInputChange","obj","handleSubmit","isFailed","history","push","pathname","customNameData","isLoading","submitted","metaData","Fragment","item","Paper","paper","root","autoComplete","onSubmit","instantValidate","Button","retry","disabled","Alert","alert","severity","withRouter","margin","padding","backgroundColor","ConfirmedUser","style","fill","onClick","redirectToHome","App","init","path","ConfirmationComp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b2ab5cf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\nconst baseUrl = process.env.api_base_url;\n\nexport default class API {\n\n    static init() {\n        this.instance = axios.create({\n            baseURL: 'https://my-json-server.typicode.com/jason-ogasian-walmart/interview-api',\n            timeout: 15000,\n            headers: {\n                'Access-Control-Allow-Origin': 'https://my-json-server.typicode.com/jason-ogasian-walmart/interview-api',\n                'Access-Control-Allow-Credentials': true,\n                'Content-Type': 'application/json',\n            },\n            // withCredentials: true\n        });\n    }\n\n    static getInstance() {\n        return this.instance;\n    }\n\n\n    static async createRequest({method = 'GET', url, params = null, data = null}) {\n        try {\n            return await this.instance({\n                method,\n                url,\n                data,\n                params\n            })\n        } catch (err) {\n            console.log('error', err)\n            throw {\n                message: 'Network Error',\n                stack: err\n            }\n        }\n    }\n}\n","export default {\n    USER_CREATE: '/user_create',\n    UPDATE_USER: '/update_user',\n    GET: 'GET',\n    POST: 'POST',\n    FAILED: 'failed',\n    SUCCESS: 'success'\n}","import API from \"./index\";\nimport api_constant from './api.constant'\n\n\nexport const getEvents = async () => {\n    try {\n        const res = await API.createRequest({\n            url: api_constant.USER_CREATE,\n            method: api_constant.GET\n        });\n        return res.data;\n    } catch (e) {\n        console.log('getEvents error', e);\n        throw e;\n    }\n};\n\nexport const postEvent = async (data) => {\n    try {\n        const res = await API.createRequest({\n            url: api_constant.UPDATE_USER,\n            method: api_constant.POST,\n            data: data\n        });\n\n        return {status: api_constant.SUCCESS,  data: res.data };\n    } catch (e) {\n        console.log('getEvents error', e);\n        return { status: api_constant.FAILED}\n    }\n};\n\n\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport { TextValidator } from 'react-material-ui-form-validator';\n\n\n\nconst useStyles = theme => ({\n    formControl: {\n        minWidth: 40,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        textAlign: 'center',\n        width: '96vW',\n        color: theme.palette.text.secondary,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n});\nclass UserType extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    handleExtraField(event) {\n        event.preventDefault()\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n        this.props.handleInputChange(event);\n    }\n\n    render() {\n        const { userTypes, user_types, extra_text_inputs, handleChange, classes } = this.props;\n        const extraInput = extra_text_inputs[user_types];\nconsole.log('extra_text_inputs', extra_text_inputs)\n        return (\n            <Grid xs={12}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-filled-label\">User Types</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-filled-label\"\n                        id=\"demo-simple-select-filled\"\n                        fullWidth=\"true\"\n                        value={user_types}\n                        onChange={handleChange}\n                    >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n                        {userTypes.map((ele, i) =>\n                            <MenuItem\n                                key={i}\n                                value={ele}>\n                                {ele}\n                            </MenuItem>\n                        )}\n                    </Select>\n                </FormControl>\n\n                {extraInput && extraInput.length && (\n                    extraInput.map((element) => {\n                        return (\n                            <Grid xs={12}>\n                                <TextValidator\n                                    id={element.value}\n                                    label={element.label}\n                                    name={element.value}\n                                    fullWidth=\"true\"\n                                    required=\"true\"\n                                    variant=\"outlined\"\n                                    validators={['required']}\n                                    errorMessages={[`${element.label} is required`]}\n                                    value={this.state[element.value] || ''}\n                                    onChange={this.handleExtraField.bind(this)} />\n                            </Grid>\n                        )\n                    })\n                )}\n            </Grid>\n        )\n    }\n\n}\n\n// export default UserType;\nexport default withStyles(useStyles)(UserType)","export function buildRequest(state) {\n\n    let req = {}\n    if (Object.keys(state.extra_inputs).length) {\n        req = state.extra_inputs;\n    }\n    req = {\n        ...req,\n        first_name: state.FirstName,\n        last_name: state.LastName,\n        email: state.Email,\n        type:  state.user_types\n    }\n    return req;\n}","import React, { Component } from 'react';\nimport { postEvent, getEvents } from \"../../../api-service/api\";\nimport UserType from '../UserType';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { withRouter } from 'react-router-dom'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Alert from '@material-ui/lab/Alert';\nimport { buildRequest } from '../../../utils';\n\n\nconst useStyles = theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100vW',\n        },\n    },\n\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    retry: {\n        backgroundColor: 'red',\n        color: 'white'\n    },\n    alert: {\n        padding: theme.spacing(2),\n        width: \"90vW\",\n        marginTop: '10px'\n    }\n});\n\nclass CreateUser extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            LastName: '',\n            FirstName: '',\n            Email: '',\n            user_types: '',\n            userTypes: [],\n            extra_text_inputs: {},\n            isLoading: false,\n            extra_inputs: {},\n            submitted: false,\n            isFailed: false\n        }\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault()\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        }, () => {\n            this.forceUpdate()\n        });\n    }\n\n    handleExtraInputChange = (event) => {\n        event.preventDefault()\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        const obj = {}\n        obj[name] = value;\n        this.setState({\n            extra_inputs: { ...obj }\n        }, () => {\n            this.forceUpdate()\n        });\n    }\n\n\n    async componentDidMount() {\n        const metaData = await getEvents();\n        this.setState({\n            userTypes: metaData.user_types,\n            extra_text_inputs: metaData.extra_text_inputs\n        });\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault()\n        const res = await postEvent(buildRequest(this.state))\n        console.log('data', res);\n        if (res.status === 'failed') {\n            this.setState({ isFailed: true });\n        } else if (res.status === 'success') {\n            if (res.data && Object.keys(res.data).length) {\n                let { history } = this.props;\n                history.push({\n                    pathname: '/confirmed-user',\n                    customNameData: res.data\n                })\n            }\n        }\n\n\n    }\n\n    handleChange(event) {\n        const type = event.target.value;\n        this.setState({\n            user_types: type\n        }, (state) => {\n            this.forceUpdate()\n        });\n\n    }\n\n\n\n    render() {\n        const { isLoading, LastName, FirstName, Email, userTypes, extra_text_inputs, user_types, isFailed } = this.state;\n        const { classes } = this.props;\n        return (\n\n            <React.Fragment>\n                <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <div>\n                            {/* <form className={classes.root} autoComplete=\"off\" onSubmit={this.handleSubmit}>\n                         */}\n                            {/* <div className={'form-content'}> */}\n                            <ValidatorForm\n                                className={classes.root}\n                                autoComplete=\"off\"\n                                onSubmit={this.handleSubmit}\n                                instantValidate={false}\n                            >\n                                <Grid item xs={12}>\n                                    <TextValidator\n                                        id=\"lastName\"\n                                        label=\"Last Name\"\n                                        name=\"LastName\"\n                                        fullWidth=\"true\"\n                                        variant=\"outlined\"\n                                        value={LastName}\n                                        validators={['required']}\n                                        errorMessages={['Last Name is required']}\n                                        onChange={this.handleInputChange} />\n\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextValidator\n                                        id=\"firstName\"\n                                        label=\"First Name\"\n                                        name=\"FirstName\"\n                                        fullWidth=\"true\"\n                                        variant=\"outlined\"\n                                        value={FirstName}\n                                        validators={['required']}\n                                        errorMessages={['First Name is required']}\n                                        onChange={this.handleInputChange} />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextValidator\n                                        id=\"Email\"\n                                        label=\"Email\"\n                                        name=\"Email\"\n                                        fullWidth=\"true\"\n                                        variant=\"outlined\"\n                                        value={Email}\n                                        validators={['required', 'isEmail']}\n                                        errorMessages={['required field', 'invalid email']}\n                                        onChange={this.handleInputChange} />\n                                </Grid>\n                                {userTypes &&\n                                    <UserType\n                                        userTypes={userTypes}\n                                        extra_text_inputs={extra_text_inputs}\n                                        user_types={user_types}\n                                        handleChange={this.handleChange.bind(this)}\n                                        handleInputChange={this.handleExtraInputChange.bind(this)} />}\n                                {/* </div> */}\n                                <div className={'buttons-row'}>\n                                    {!isFailed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    type=\"submit\"\n                                                    validators={['required']}\n                                                    disabled={isLoading}>\n                                                    Submit\n                                                </Button> : (\n                                                    <div>\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"danger\"\n                                                            type=\"submit\"\n                                                            className={classes.retry}\n                                                            validators={['required']}\n                                                            disabled={isLoading}>\n                                                            Retry\n                                                        </Button>\n                                                        <Alert className={classes.alert} severity=\"error\">Something went wrong. Please try after sometime</Alert>\n                                                    </div>\n\n                                        )}\n                                </div>\n                            </ValidatorForm>\n                        </div>\n                    </Paper>\n                </Grid>\n\n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default withRouter(withStyles(useStyles)(CreateUser))\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport CheckCircleOutlineSharpIcon from '@material-ui/icons/CheckCircleOutlineSharp';\n\nconst useStyles = theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100vW',\n        },\n    },\n\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\nclass ConfirmedUser extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n    redirectToHome(event) {\n        event.preventDefault()\n        let { history } = this.props;\n        history.push('interview-api-test')\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>\n                <span> <CheckCircleOutlineSharpIcon style={{fill: \"green\"}}/></span>\n                <span>  User Successfully Created</span>\n                   </h2>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    onClick={this.redirectToHome.bind(this)}\n                >\n                    Return Home\n                        </Button>\n            </div>\n\n        )\n\n    }\n}\n\n\nexport default withRouter(withStyles(useStyles)(ConfirmedUser))","import logo from '../logo.svg';\nimport './index.css';\nimport { Component } from 'react';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport CreateUser from './Component/CreateUser';\nimport API from '../api-service';\nimport ConfirmationComp from './Component/ConfirmationComp';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    API.init()\n  }\n  render() {\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h4> Create User </h4>\n          </header>\n          <BrowserRouter>\n            <Switch>\n            <Route  path=\"/confirmed-user\">\n                <ConfirmationComp/>\n              </Route>\n              <Route  path=\"/interview-api-test\">\n                <CreateUser />\n              </Route>\n              <Route path=\"/\">\n                <CreateUser />\n              </Route>\n            </Switch>\n      </BrowserRouter>\n\n        </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}